package com.gxhy.base.basic.controller;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.gxhy.base.basic.mapper.RiverLongMapper;
import com.gxhy.base.basic.model.QualityModel;
import com.gxhy.base.basic.model.ResultRiverInfoModel;
import com.gxhy.base.basic.model.RiverLongModel;
import com.gxhy.base.basic.model.RiverModel;
import com.gxhy.base.basic.service.RiverLakeService;
import com.gxhy.base.basic.service.RiverLongService;
import com.gxhy.base.controller.BaseController;
import com.gxhy.base.model.RequestModel;
import com.gxhy.base.model.ResponseModel;
import com.gxhy.utils.DateUtil;
import com.gxhy.utils.QueryUtil;


@Slf4j
@RestController
@RequestMapping("basicInfo/riverLong")
@SuppressWarnings("all")
public class RiverLongController extends BaseController{
	
	private static final Logger logger = LoggerFactory.getLogger(RiverLakeController.class);
	
	@Autowired
	private RiverLongService   riverLongService;
	
	/***
     * 导入河长基本信息到数据库
     * @param file
     * @param request
     * @param response
     * @return
     */
	@RequestMapping(value = "/importRiverLong",method = RequestMethod.POST)
    public Object importRiverLong(@RequestParam MultipartFile file,QueryUtil param) {
			//导入操作
			int i=riverLongService.importFileRL(file,param.getIndex());
		    return ResponseModel.Success(i);   
    }
	
	
	/***
	 * 获取所有的河长数据以及条件查询
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getAllRiverLong",method = RequestMethod.GET)
    public Object getAllRiverLong(HttpServletRequest request,QueryUtil model) {
			JSONObject map=new JSONObject();
			List<RiverLongModel> riverLongs=null;
			try {
				map = InitParams(model);
				RequestInitRanges(map,true,QueryUtil.class);
				map.put("keyWord", model.getKeyWord());
				map.put("gmTp", model.getIndex()+1);
				riverLongs=riverLongService.selectAllRiverLongs(map);
			}catch (Exception e) {
				e.printStackTrace();
			}
		    return ResponseModel.Success(riverLongs);   
    }	
	
	/*****
	 * 删除一条或多个河长的信息
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/deleteRiverLong",method = RequestMethod.POST)
    public Object deleteRiverLong(HttpServletRequest request,QueryUtil model) {
			int i=riverLongService.deleteRL(model);
			return ResponseModel.Success(i);     
    }
	
	
	/**
	 * 根据条件查询所有的河流信息
	 * @throws Exception
	 */
	@RequestMapping(value = "/getriverInfoList", method = RequestMethod.GET)
	public Object getRiverInfoList(HttpServletRequest request) throws Exception {
		JSONObject map = new JSONObject();
		List<ResultRiverInfoModel> models=riverLongService.getRiverInfoList(map);
		return ResponseModel.Success(models);
	}
	/**
	 * echart折线图
	 * 
	 * @param model
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/echartRiver", method = RequestMethod.GET)
	public Object echartRiver(HttpServletRequest request) throws Exception {
		// 默认采用第一条数据
		String stcd = request.getParameter("stcd");
		String tm = request.getParameter("tm");
		if(StringUtils.isNotBlank(tm)){
			Date date = new Date(Long.valueOf(tm));
			String etm = DateUtil.sdf.format(date);
			String stm = DateUtil.sdf.format(DateUtil.getNextDay(date));
			List<ResultRiverInfoModel> zlist = riverLongService.getZlist(stcd, stm, etm);
			return ResponseModel.Success(zlist);
		}
		return ResponseModel.Failure("时间格式不正确");
	}
	
	
   /**
    * 获取水质chart图表数据
    * @param request
    * @return
    */
	@RequestMapping(value = "/echartQuality", method = RequestMethod.GET)
	public Object echartQuality(HttpServletRequest request){
		JSONObject map = new JSONObject();
		String quaId = request.getParameter("id");
		String date = request.getParameter("date");
		String sql = "";
		String Table = "yuancheng";
		if(StringUtils.isNotBlank(quaId)){
			if("wt".equals(quaId)){
				sql = "Q.WT";
			}else if("turb".equals(quaId)){
				sql = "Q.TURB";
			}else if("cond".equals(quaId)){
				sql = "Q.COND";
			}else if("ph".equals(quaId)){
				sql = "Q.PH";
			}else if("dox".equals(quaId)){
				sql = "Q.DOX";
			}
		}
		if(StringUtils.isNotBlank(date)){
			Date startTm=DateUtil.getStartToTime(date);
			Date endTm=DateUtil.getEndToTime(date);
			map.put("starttime", startTm);
			map.put("endtime", endTm);
		}
		map.put("table", Table);
		map.put("sql", sql);
		map.put(RequestModel.SQLID,RiverLongMapper.class.getName() + ".getQuaValList");
		List<QualityModel> zlist = riverLongService.selectList(map);
		return ResponseModel.Success(zlist);
	}
}
