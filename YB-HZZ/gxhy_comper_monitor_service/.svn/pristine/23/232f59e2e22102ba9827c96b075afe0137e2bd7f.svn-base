package com.gxhy.base.basic.controller;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.formula.functions.T;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.Page;
import com.gxhy.base.basic.mapper.RiverLakeMapper;
import com.gxhy.base.basic.model.LakeModel;
import com.gxhy.base.basic.model.RiverModel;
import com.gxhy.base.basic.service.RiverLakeService;
import com.gxhy.base.controller.BaseController;
import com.gxhy.base.imp.ImportExeclUtil;
import com.gxhy.base.imp.ImportExeclUtil.DateUtil;
import com.gxhy.base.model.RequestModel;
import com.gxhy.base.model.ResponseModel;
import com.gxhy.utils.QueryUtil;

@Slf4j
@RestController
@RequestMapping("basicInfo/riverLake")
@SuppressWarnings("all")
public class RiverLakeController extends BaseController{
	
	private static final Logger logger = LoggerFactory.getLogger(RiverLakeController.class);
	
	@Autowired
	private RiverLakeService   riverLakeService;
	
    /***
     * 导入河流信息到数据库
     * @param file
     * @param request
     * @param response
     * @return
     */
	@RequestMapping(value = "/importRiverLake",method = RequestMethod.POST)
    public Object importRiverLake(@RequestParam MultipartFile file,QueryUtil param) {
			//导入操作
			int i=riverLakeService.importFile(file,param.getIndex());
		    return ResponseModel.Success(i);   
    }
	
	/*****
	 * 删除一条或多条河流数据
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/deleteRiverLake",method = RequestMethod.POST)
    public Object deleteRiver(HttpServletRequest request,QueryUtil model) {
			int i=riverLakeService.deleteRiver(model);
			return ResponseModel.Success(i);   
    }
	
	/***
	 * 获取所有的河流数据以及条件查询
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getAllRiver",method = RequestMethod.GET)
    public Object getAllRiver(HttpServletRequest request,QueryUtil model) {	
			JSONObject  map=getQueryMap(request,model);
			List<RiverModel> rivers=riverLakeService.selectAllRivers(map);
		    return ResponseModel.Success(rivers);   
    }
	
	/***
	 * 获取所有的湖泊数据以及条件查询
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getAllLake",method = RequestMethod.GET)
    public Object getAllLake(HttpServletRequest request,QueryUtil model) {
			JSONObject  map=getQueryMap(request,model);
			List<RiverModel> rivers=riverLakeService.selectAllLakes(map);
		    return ResponseModel.Success(rivers);   
    }
	
	/***
	 * 获取所有的河段数据以及条件查询
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getAllReach",method = RequestMethod.GET)
    public Object getAllReach(HttpServletRequest request,QueryUtil model) {
			JSONObject  map=getQueryMap(request,model);
			List<RiverModel> reachs=riverLakeService.selectAllReachs(map);
		    return ResponseModel.Success(reachs);   
    }
	
	/***
	 * 获取所有的水库数据以及条件查询
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getAllRsvr",method = RequestMethod.GET)
    public Object getAllRsvr(HttpServletRequest request,QueryUtil model) {
			JSONObject  map=getQueryMap(request,model);
			List<RiverModel> rsvrs=riverLakeService.selectAllRsvrs(map);
		    return ResponseModel.Success(rsvrs);   
    }
	
	/***
	 * 获取所有的水库数据以及条件查询
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getAllPond",method = RequestMethod.GET)
    public Object getAllPond(HttpServletRequest request,QueryUtil model) {
			JSONObject  map=getQueryMap(request,model);
			List<RiverModel> ponds=riverLakeService.selectAllPonds(map);
		    return ResponseModel.Success(ponds);   
    }
		
	/**
	 * 统一的条件
	 * @param request
	 * @param model
	 * @return
	 */
	public JSONObject getQueryMap(HttpServletRequest request,QueryUtil model){
		JSONObject map = new JSONObject();
		try {
			map = InitParams(model);
			RequestInitRanges(map,true,QueryUtil.class);
			map.put("keyWord", model.getKeyWord());
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	
}
